{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entraceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "raffleInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NoEnoughStartingFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "remainingInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleStatus",
          "type": "uint256"
        }
      ],
      "name": "Raffle__NoIntervalReachedToWin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__WinnerTransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "playerAddress",
          "type": "address"
        }
      ],
      "name": "RafflePlayerJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RaffleRequestWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winnerAddress",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestRaffleTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "playerIndex",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0a7b3b0f7904542108d4178035e94bc7eba067a677833af3b9b4203252276b7d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1181151",
    "logsBloom": "0x
    "blockHash": "0xd5eac6ee327a6c3d40feeba2a4a9c7e7849cfa9702795d8f688e6ee9bd0e43c0",
    "transactionHash": "0x0a7b3b0f7904542108d4178035e94bc7eba067a677833af3b9b4203252276b7d",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1181151",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "60"
  ],
  "numDeployments": 1,
  "solcInputHash": "bb64ab5f453fabc5302172827c82a932",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entraceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"raffleInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NoEnoughStartingFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleStatus\",\"type\":\"uint256\"}],\"name\":\"Raffle__NoIntervalReachedToWin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__WinnerTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"RafflePlayerJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RaffleRequestWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestRaffleTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerIndex\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Artemides - Edmundo Arias\",\"details\":\"Raffle is implements the VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"function required to run on chainlink automation network\",\"returns\":{\"performData\":\"is the data to be run\",\"upkeepNeeded\":\"is needed to perform the upkeep\"}}},\"title\":\"Untamperable Raffle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"this descentalized raffle picks a random winner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\n\\n// the raffle should accept new investors who invoices a certain ammount of ether\\n// the contract needs to pick automatically a  winner, every x random time forever. with no someones' interaction\\n\\n//Chainlink oracle -> randomness, automated execution(keepers),\\n\\n// need at least an entrace fee to join\\n// keep track of each entering player\\n// emit and event when a user enters into the raffle\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nerror Raffle__NoEnoughStartingFee();\\nerror Raffle__WinnerTransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__NoIntervalReachedToWin(uint256 remainingInterval, uint256 raffleStatus);\\n\\n/**\\n * @title Untamperable Raffle\\n * @author Artemides - Edmundo Arias\\n * @notice this descentalized raffle picks a random winner\\n * @dev Raffle is implements the VRF v2 and Chainlink Keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING_WINNER\\n    }\\n\\n    uint256 private immutable i_entraceFee;\\n    address payable[] s_players;\\n    VRFCoordinatorV2Interface private i_vrfCoordinatorV2;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint8 private constant REQUEST_CONFIRMATIONS = 5;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint8 private constant NUM_WORDS = 1;\\n    address private s_lastWinner;\\n    uint256 private immutable i_raffleInterval;\\n    uint256 private s_lastRaffleInterval;\\n    RaffleState private s_raffleSate;\\n\\n    event RafflePlayerJoined(address playerAddress);\\n    event RaffleRequestWinner(uint256 requestId);\\n    event WinnerPicked(address indexed winnerAddress);\\n\\n    modifier enoughStartingFee() {\\n        if (msg.value < i_entraceFee) revert Raffle__NoEnoughStartingFee();\\n        _;\\n    }\\n\\n    modifier onlyOpenRaffle() {\\n        if (s_raffleSate != RaffleState.OPEN) revert Raffle__NotOpen();\\n        _;\\n    }\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entraceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 raffleInterval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entraceFee = entraceFee;\\n        i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_raffleInterval = raffleInterval;\\n        s_lastRaffleInterval = block.timestamp;\\n    }\\n\\n    function joinRaffle() public payable onlyOpenRaffle enoughStartingFee {\\n        s_players.push(payable(msg.sender));\\n\\n        emit RafflePlayerJoined(msg.sender);\\n    }\\n\\n    /**\\n     * @dev function required to run on chainlink automation network\\n     * @return upkeepNeeded is needed to perform the upkeep\\n     * @return performData is the data to be run\\n     */\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    ) public view override returns (bool upkeepNeeded, bytes memory performData) {\\n        upkeepNeeded = isUpkeepNeeded();\\n        performData = \\\"\\\";\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        uint256 remainingInterval = block.timestamp - s_lastRaffleInterval;\\n        if (!isUpkeepNeeded())\\n            revert Raffle__NoIntervalReachedToWin(remainingInterval, uint256(s_raffleSate));\\n\\n        s_raffleSate = RaffleState.CALCULATING_WINNER;\\n        uint256 requestId = i_vrfCoordinatorV2.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RaffleRequestWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\n        s_lastWinner = s_players[winnerIndex];\\n        (bool transfered, ) = s_lastWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!transfered) revert Raffle__WinnerTransferFailed();\\n\\n        s_raffleSate = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastRaffleInterval = block.timestamp;\\n        emit WinnerPicked(s_lastWinner);\\n    }\\n\\n    function isUpkeepNeeded() internal view returns (bool upKeepNeeded) {\\n        upKeepNeeded =\\n            isRaffleState(RaffleState.OPEN) &&\\n            thereIsPlayers() &&\\n            withBalance() &&\\n            intervalReached();\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entraceFee;\\n    }\\n\\n    function getPlayer(uint256 playerIndex) public view returns (address) {\\n        return s_players[playerIndex];\\n    }\\n\\n    function isRaffleState(RaffleState raffleSate) internal view returns (bool) {\\n        return raffleSate == s_raffleSate;\\n    }\\n\\n    function withBalance() internal view returns (bool) {\\n        return address(this).balance > 0;\\n    }\\n\\n    function intervalReached() internal view returns (bool) {\\n        return (block.timestamp - s_lastRaffleInterval) > i_raffleInterval;\\n    }\\n\\n    function thereIsPlayers() internal view returns (bool) {\\n        return s_players.length > 0;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleSate;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getRaffleInterval() public view returns (uint256) {\\n        return i_raffleInterval;\\n    }\\n\\n    function getLatestRaffleTimeStamp() public view returns (uint256) {\\n        return s_lastRaffleInterval;\\n    }\\n\\n    receive() external payable {\\n        joinRaffle();\\n    }\\n\\n    fallback() external payable {\\n        joinRaffle();\\n    }\\n}\\n\",\"keccak256\":\"0x6b3209de3a5adc74a3898a2d81fd76c8f5cfe649a67351153ce83704b993952e\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620016e5380380620016e5833981810160405281019062000038919062000272565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a0818152505085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff1681525050806101208181525050426003819055505050505050506200030e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200013e8262000111565b9050919050565b620001508162000131565b81146200015c57600080fd5b50565b600081519050620001708162000145565b92915050565b6000819050919050565b6200018b8162000176565b81146200019757600080fd5b50565b600081519050620001ab8162000180565b92915050565b6000819050919050565b620001c681620001b1565b8114620001d257600080fd5b50565b600081519050620001e681620001bb565b92915050565b600067ffffffffffffffff82169050919050565b6200020b81620001ec565b81146200021757600080fd5b50565b6000815190506200022b8162000200565b92915050565b600063ffffffff82169050919050565b6200024c8162000231565b81146200025857600080fd5b50565b6000815190506200026c8162000241565b92915050565b60008060008060008060c087890312156200029257620002916200010c565b5b6000620002a289828a016200015f565b9650506020620002b589828a016200019a565b9550506040620002c889828a01620001d5565b9450506060620002db89828a016200021a565b9350506080620002ee89828a016200025b565b92505060a06200030189828a016200019a565b9150509295509295509295565b60805160a05160c05160e0516101005161012051611372620003736000396000818161076e0152610aab0152600061062301526000610600015260006105df01526000818161030101526103f9015260008181610436015261048a01526113726000f3fe6080604052600436106100a05760003560e01c806353a2c19a1161006457806353a2c19a1461016b5780636e04ff0d146101965780636e80809f146101d4578063e55ae4e8146101ff578063e5690db81461023c578063fd6673f514610267576100af565b806309bc33a7146100b9578063115cbaf5146100e4578063136b33921461010f5780631fe543e3146101195780634585e33b14610142576100af565b366100af576100ad610292565b005b6100b7610292565b005b3480156100c557600080fd5b506100ce6103f5565b6040516100db9190610b9e565b60405180910390f35b3480156100f057600080fd5b506100f961041d565b6040516101069190610c30565b60405180910390f35b610117610292565b005b34801561012557600080fd5b50610140600480360381019061013b9190610de4565b610434565b005b34801561014e57600080fd5b5061016960048036038101906101649190610e9b565b6104f4565b005b34801561017757600080fd5b506101806106e6565b60405161018d9190610b9e565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b89190610e9b565b6106f2565b6040516101cb929190610f82565b60405180910390f35b3480156101e057600080fd5b506101e9610719565b6040516101f69190610b9e565b60405180910390f35b34801561020b57600080fd5b5061022660048036038101906102219190610fb2565b610723565b6040516102339190611020565b60405180910390f35b34801561024857600080fd5b5061025161076a565b60405161025e9190610b9e565b60405180910390f35b34801561027357600080fd5b5061027c610792565b6040516102899190610b9e565b60405180910390f35b600060018111156102a6576102a5610bb9565b5b600460009054906101000a900460ff1660018111156102c8576102c7610bb9565b5b146102ff576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610359576040517f283bbff100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f456b8dc13bfff75121ddbf80e7a3cacc32d8aaa33e03a336c66064b1277ad080336040516103eb9190611020565b60405180910390a1565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104e657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104dd92919061103b565b60405180910390fd5b6104f0828261079e565b5050565b6000600354426105049190611093565b905061050e610a0e565b6105725780600460009054906101000a900460ff16600181111561053557610534610bb9565b5b6040517fc2e3a5d70000000000000000000000000000000000000000000000000000000081526004016105699291906110c7565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561059857610597610bb9565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060057f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106649594939291906111d2565b6020604051808303816000875af1158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a7919061123a565b90507f6a26914eaa14b7bba3811166ef5bb36f7720311d335c6956bce19c3be5fba5d5816040516106d89190610b9e565b60405180910390a150505050565b6000600160ff16905090565b600060606106fe610a0e565b91506040518060200160405280600081525090509250929050565b6000600354905090565b600080828154811061073857610737611267565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60008080549050826000815181106107b9576107b8611267565b5b60200260200101516107cb91906112c5565b9050600081815481106107e1576107e0611267565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161089490611327565b60006040518083038185875af1925050503d80600081146108d1576040519150601f19603f3d011682016040523d82523d6000602084013e6108d6565b606091505b5050905080610911576040517f07685e3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460006101000a81548160ff0219169083600181111561093757610936610bb9565b5b0217905550600067ffffffffffffffff81111561095757610956610ca1565b5b6040519080825280602002602001820160405280156109855781602001602082028036833780820191505090505b506000908051906020019061099b929190610ade565b5042600381905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b6000610a1a6000610a4f565b8015610a2a5750610a29610a8e565b5b8015610a3a5750610a39610a9d565b5b8015610a4a5750610a49610aa7565b5b905090565b6000600460009054906101000a900460ff166001811115610a7357610a72610bb9565b5b826001811115610a8657610a85610bb9565b5b149050919050565b60008060008054905011905090565b6000804711905090565b60007f000000000000000000000000000000000000000000000000000000000000000060035442610ad89190611093565b11905090565b828054828255906000526020600020908101928215610b57579160200282015b82811115610b565782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610afe565b5b509050610b649190610b68565b5090565b5b80821115610b81576000816000905550600101610b69565b5090565b6000819050919050565b610b9881610b85565b82525050565b6000602082019050610bb36000830184610b8f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bf957610bf8610bb9565b5b50565b6000819050610c0a82610be8565b919050565b6000610c1a82610bfc565b9050919050565b610c2a81610c0f565b82525050565b6000602082019050610c456000830184610c21565b92915050565b6000604051905090565b600080fd5b600080fd5b610c6881610b85565b8114610c7357600080fd5b50565b600081359050610c8581610c5f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cd982610c90565b810181811067ffffffffffffffff82111715610cf857610cf7610ca1565b5b80604052505050565b6000610d0b610c4b565b9050610d178282610cd0565b919050565b600067ffffffffffffffff821115610d3757610d36610ca1565b5b602082029050602081019050919050565b600080fd5b6000610d60610d5b84610d1c565b610d01565b90508083825260208201905060208402830185811115610d8357610d82610d48565b5b835b81811015610dac5780610d988882610c76565b845260208401935050602081019050610d85565b5050509392505050565b600082601f830112610dcb57610dca610c8b565b5b8135610ddb848260208601610d4d565b91505092915050565b60008060408385031215610dfb57610dfa610c55565b5b6000610e0985828601610c76565b925050602083013567ffffffffffffffff811115610e2a57610e29610c5a565b5b610e3685828601610db6565b9150509250929050565b600080fd5b60008083601f840112610e5b57610e5a610c8b565b5b8235905067ffffffffffffffff811115610e7857610e77610e40565b5b602083019150836001820283011115610e9457610e93610d48565b5b9250929050565b60008060208385031215610eb257610eb1610c55565b5b600083013567ffffffffffffffff811115610ed057610ecf610c5a565b5b610edc85828601610e45565b92509250509250929050565b60008115159050919050565b610efd81610ee8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f3d578082015181840152602081019050610f22565b60008484015250505050565b6000610f5482610f03565b610f5e8185610f0e565b9350610f6e818560208601610f1f565b610f7781610c90565b840191505092915050565b6000604082019050610f976000830185610ef4565b8181036020830152610fa98184610f49565b90509392505050565b600060208284031215610fc857610fc7610c55565b5b6000610fd684828501610c76565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061100a82610fdf565b9050919050565b61101a81610fff565b82525050565b60006020820190506110356000830184611011565b92915050565b60006040820190506110506000830185611011565b61105d6020830184611011565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061109e82610b85565b91506110a983610b85565b92508282039050818111156110c1576110c0611064565b5b92915050565b60006040820190506110dc6000830185610b8f565b6110e96020830184610b8f565b9392505050565b6000819050919050565b611103816110f0565b82525050565b600067ffffffffffffffff82169050919050565b61112681611109565b82525050565b600060ff82169050919050565b600061ffff82169050919050565b6000819050919050565b600061116c6111676111628461112c565b611147565b611139565b9050919050565b61117c81611151565b82525050565b600063ffffffff82169050919050565b61119b81611182565b82525050565b60006111bc6111b76111b28461112c565b611147565b611182565b9050919050565b6111cc816111a1565b82525050565b600060a0820190506111e760008301886110fa565b6111f4602083018761111d565b6112016040830186611173565b61120e6060830185611192565b61121b60808301846111c3565b9695505050505050565b60008151905061123481610c5f565b92915050565b6000602082840312156112505761124f610c55565b5b600061125e84828501611225565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112d082610b85565b91506112db83610b85565b9250826112eb576112ea611296565b5b828206905092915050565b600081905092915050565b50565b60006113116000836112f6565b915061131c82611301565b600082019050919050565b600061133282611304565b915081905091905056fea2646970667358221220d7bcadae2162683e06b5b098042ad66995f498daaf066d9c3f8d593562bf83e564736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c806353a2c19a1161006457806353a2c19a1461016b5780636e04ff0d146101965780636e80809f146101d4578063e55ae4e8146101ff578063e5690db81461023c578063fd6673f514610267576100af565b806309bc33a7146100b9578063115cbaf5146100e4578063136b33921461010f5780631fe543e3146101195780634585e33b14610142576100af565b366100af576100ad610292565b005b6100b7610292565b005b3480156100c557600080fd5b506100ce6103f5565b6040516100db9190610b9e565b60405180910390f35b3480156100f057600080fd5b506100f961041d565b6040516101069190610c30565b60405180910390f35b610117610292565b005b34801561012557600080fd5b50610140600480360381019061013b9190610de4565b610434565b005b34801561014e57600080fd5b5061016960048036038101906101649190610e9b565b6104f4565b005b34801561017757600080fd5b506101806106e6565b60405161018d9190610b9e565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b89190610e9b565b6106f2565b6040516101cb929190610f82565b60405180910390f35b3480156101e057600080fd5b506101e9610719565b6040516101f69190610b9e565b60405180910390f35b34801561020b57600080fd5b5061022660048036038101906102219190610fb2565b610723565b6040516102339190611020565b60405180910390f35b34801561024857600080fd5b5061025161076a565b60405161025e9190610b9e565b60405180910390f35b34801561027357600080fd5b5061027c610792565b6040516102899190610b9e565b60405180910390f35b600060018111156102a6576102a5610bb9565b5b600460009054906101000a900460ff1660018111156102c8576102c7610bb9565b5b146102ff576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610359576040517f283bbff100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f456b8dc13bfff75121ddbf80e7a3cacc32d8aaa33e03a336c66064b1277ad080336040516103eb9190611020565b60405180910390a1565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104e657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104dd92919061103b565b60405180910390fd5b6104f0828261079e565b5050565b6000600354426105049190611093565b905061050e610a0e565b6105725780600460009054906101000a900460ff16600181111561053557610534610bb9565b5b6040517fc2e3a5d70000000000000000000000000000000000000000000000000000000081526004016105699291906110c7565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561059857610597610bb9565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060057f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106649594939291906111d2565b6020604051808303816000875af1158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a7919061123a565b90507f6a26914eaa14b7bba3811166ef5bb36f7720311d335c6956bce19c3be5fba5d5816040516106d89190610b9e565b60405180910390a150505050565b6000600160ff16905090565b600060606106fe610a0e565b91506040518060200160405280600081525090509250929050565b6000600354905090565b600080828154811061073857610737611267565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60008080549050826000815181106107b9576107b8611267565b5b60200260200101516107cb91906112c5565b9050600081815481106107e1576107e0611267565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161089490611327565b60006040518083038185875af1925050503d80600081146108d1576040519150601f19603f3d011682016040523d82523d6000602084013e6108d6565b606091505b5050905080610911576040517f07685e3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460006101000a81548160ff0219169083600181111561093757610936610bb9565b5b0217905550600067ffffffffffffffff81111561095757610956610ca1565b5b6040519080825280602002602001820160405280156109855781602001602082028036833780820191505090505b506000908051906020019061099b929190610ade565b5042600381905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b6000610a1a6000610a4f565b8015610a2a5750610a29610a8e565b5b8015610a3a5750610a39610a9d565b5b8015610a4a5750610a49610aa7565b5b905090565b6000600460009054906101000a900460ff166001811115610a7357610a72610bb9565b5b826001811115610a8657610a85610bb9565b5b149050919050565b60008060008054905011905090565b6000804711905090565b60007f000000000000000000000000000000000000000000000000000000000000000060035442610ad89190611093565b11905090565b828054828255906000526020600020908101928215610b57579160200282015b82811115610b565782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610afe565b5b509050610b649190610b68565b5090565b5b80821115610b81576000816000905550600101610b69565b5090565b6000819050919050565b610b9881610b85565b82525050565b6000602082019050610bb36000830184610b8f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bf957610bf8610bb9565b5b50565b6000819050610c0a82610be8565b919050565b6000610c1a82610bfc565b9050919050565b610c2a81610c0f565b82525050565b6000602082019050610c456000830184610c21565b92915050565b6000604051905090565b600080fd5b600080fd5b610c6881610b85565b8114610c7357600080fd5b50565b600081359050610c8581610c5f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cd982610c90565b810181811067ffffffffffffffff82111715610cf857610cf7610ca1565b5b80604052505050565b6000610d0b610c4b565b9050610d178282610cd0565b919050565b600067ffffffffffffffff821115610d3757610d36610ca1565b5b602082029050602081019050919050565b600080fd5b6000610d60610d5b84610d1c565b610d01565b90508083825260208201905060208402830185811115610d8357610d82610d48565b5b835b81811015610dac5780610d988882610c76565b845260208401935050602081019050610d85565b5050509392505050565b600082601f830112610dcb57610dca610c8b565b5b8135610ddb848260208601610d4d565b91505092915050565b60008060408385031215610dfb57610dfa610c55565b5b6000610e0985828601610c76565b925050602083013567ffffffffffffffff811115610e2a57610e29610c5a565b5b610e3685828601610db6565b9150509250929050565b600080fd5b60008083601f840112610e5b57610e5a610c8b565b5b8235905067ffffffffffffffff811115610e7857610e77610e40565b5b602083019150836001820283011115610e9457610e93610d48565b5b9250929050565b60008060208385031215610eb257610eb1610c55565b5b600083013567ffffffffffffffff811115610ed057610ecf610c5a565b5b610edc85828601610e45565b92509250509250929050565b60008115159050919050565b610efd81610ee8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f3d578082015181840152602081019050610f22565b60008484015250505050565b6000610f5482610f03565b610f5e8185610f0e565b9350610f6e818560208601610f1f565b610f7781610c90565b840191505092915050565b6000604082019050610f976000830185610ef4565b8181036020830152610fa98184610f49565b90509392505050565b600060208284031215610fc857610fc7610c55565b5b6000610fd684828501610c76565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061100a82610fdf565b9050919050565b61101a81610fff565b82525050565b60006020820190506110356000830184611011565b92915050565b60006040820190506110506000830185611011565b61105d6020830184611011565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061109e82610b85565b91506110a983610b85565b92508282039050818111156110c1576110c0611064565b5b92915050565b60006040820190506110dc6000830185610b8f565b6110e96020830184610b8f565b9392505050565b6000819050919050565b611103816110f0565b82525050565b600067ffffffffffffffff82169050919050565b61112681611109565b82525050565b600060ff82169050919050565b600061ffff82169050919050565b6000819050919050565b600061116c6111676111628461112c565b611147565b611139565b9050919050565b61117c81611151565b82525050565b600063ffffffff82169050919050565b61119b81611182565b82525050565b60006111bc6111b76111b28461112c565b611147565b611182565b9050919050565b6111cc816111a1565b82525050565b600060a0820190506111e760008301886110fa565b6111f4602083018761111d565b6112016040830186611173565b61120e6060830185611192565b61121b60808301846111c3565b9695505050505050565b60008151905061123481610c5f565b92915050565b6000602082840312156112505761124f610c55565b5b600061125e84828501611225565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112d082610b85565b91506112db83610b85565b9250826112eb576112ea611296565b5b828206905092915050565b600081905092915050565b50565b60006113116000836112f6565b915061131c82611301565b600082019050919050565b600061133282611304565b915081905091905056fea2646970667358221220d7bcadae2162683e06b5b098042ad66995f498daaf066d9c3f8d593562bf83e564736f6c63430008120033",
  "devdoc": {
    "author": "Artemides - Edmundo Arias",
    "details": "Raffle is implements the VRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "function required to run on chainlink automation network",
        "returns": {
          "performData": "is the data to be run",
          "upkeepNeeded": "is needed to perform the upkeep"
        }
      }
    },
    "title": "Untamperable Raffle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "this descentalized raffle picks a random winner",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 195,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 198,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_vrfCoordinatorV2",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VRFCoordinatorV2Interface)165"
      },
      {
        "astId": 212,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 216,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastRaffleInterval",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 219,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleSate",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(RaffleState)190"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)165": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleState)190": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}